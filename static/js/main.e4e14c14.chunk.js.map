{"version":3,"sources":["components/TodoListFooter/TodoListFooter.tsx","components/AddNewItemForm/AddNewItemForm.tsx","components/TodoListTasks/TodoListTask/TodoListTask.tsx","components/TodoListTasks/TodoListTasks.tsx","components/TodoListTitle/TodoListTitle.tsx","api/api.ts","redux/reducer.ts","components/Todolist/TodoList.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["TodoListFooter","state","isHidden","onAllFilterClick","_this","props","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","setState","onHideFiltersClick","render","react_default","a","createElement","style","paddingTop","Button","variant","filterValue","onClick","color","className","React","Component","AddNewItemForm","error","title","onAddItemClick","newTitle","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","TextField","helperText","label","onChange","IconButton","AddBox","height","width","TodoListTask","editeMode","activateEditMode","deActivateEditMode","changeTitle","task","onIsDoneChanged","changeStatus","checked","onDeliteTask","deliteTask","id","isDone","status","Container","fixed","Paper","elevation","margin","background","Checkbox","defaultValue","autoFocus","onBlur","Delete","TodoListTasks","taskElements","tasks","map","TodoListTasks_TodoListTask_TodoListTask","TodoListTitle","onTitleChange","changeTodolistTitle","display","justifyContent","type","deleteTodolist","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTodolist","post","getTodolist","get","deleteTodo","todolistId","delete","concat","updateTodolistTitle","put","getTasks","taskId","deleteTask","createTask","newTask","Object","objectSpread2","ADD_TASK","initialState","todolists","todolistReducer","newTasks","arguments","length","undefined","action","tl","newTodolist","toConsumableArray","todo","obj","filter","el","t","changeTask","TodoList","addTsk","newFilterValue","deletaTask","_this$props$tasks","Grid","item","padding","components_TodoListTitle_TodoListTitle","components_AddNewItemForm_AddNewItemForm","components_TodoListTasks_TodoListTasks","components_TodoListFooter_TodoListFooter","this","ConnectedTodolist","connect","dispatch","then","response","data","resultCode","items","App","restoreState","addTodoList","addTodolist","todoLists","Todolist_TodoList","AppBar","position","Toolbar","edge","aria-label","Menu_default","container","spacing","ConnectedApp","todolist","res","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8LAyDeA,8MA3CXC,MAAmB,CACfC,UAAU,KAGdC,iBAAmB,WACfC,EAAKC,MAAMC,aAAa,UAE5BC,uBAAyB,WACrBH,EAAKC,MAAMC,aAAa,gBAE5BE,oBAAsB,WAClBJ,EAAKC,MAAMC,aAAa,aAE5BG,mBAAqB,WACjBL,EAAKM,SAAS,CAACR,UAAU,OAE7BS,mBAAqB,WACjBP,EAAKM,SAAS,CAACR,UAAU,OAI7BU,OAAS,WAEL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAY,UACnBb,EAAKH,MAAMC,UAAYW,EAAAC,EAAAC,cAAA,WACvBF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAAoC,QAA3Bf,EAAKC,MAAMe,YAAwB,YAAc,OAC1DC,QAASjB,EAAKD,kBADtB,OAEAU,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAAoC,cAA3Bf,EAAKC,MAAMe,YAA8B,YAAc,OAAQE,MAAO,UAC/ED,QAASjB,EAAKG,wBADtB,aAEAM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAAoC,WAA3Bf,EAAKC,MAAMe,YAA2B,YAAc,OAAQE,MAAO,YAC5ED,QAASjB,EAAKI,qBADtB,WAIFK,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAY,UACnBb,EAAKH,MAAMC,UAAYW,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQK,UAAU,OAAOF,QAASjB,EAAKO,oBAAvC,QACxBP,EAAKH,MAAMC,UAAYW,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQK,UAAU,OAAOF,QAASjB,EAAKK,oBAAvC,uBAtCfe,IAAMC,sCCyDpBC,8MApDXzB,MAAmB,CACf0B,OAAO,EACPC,MAAO,MAIXC,eAAiB,WACb,IAAIC,EAAW1B,EAAKH,MAAM2B,MAET,KAAbE,EACA1B,EAAKM,SAAS,CAACiB,OAAO,KAEtBvB,EAAKM,SAAS,CAACiB,OAAO,EAAOC,MAAO,KACpCxB,EAAKC,MAAM0B,QAAQD,OAI3BE,eAAiB,SAACC,GACd7B,EAAKM,SAAS,CACViB,OAAO,EACPC,MAAOK,EAAEC,cAAcC,WAI/BC,WAAa,SAACH,GACI,UAAVA,EAAEI,KACFjC,EAAKyB,oBAKbjB,OAAS,WAEL,OACIC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,wBACXV,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIX,QAASvB,EAAKH,MAAM0B,MACpBY,WAAYnC,EAAKH,MAAM0B,MAAO,oBAAqB,GACnDR,QAAS,WACTqB,MAAM,aACNC,SAAUrC,EAAK4B,eACfI,WAAYhC,EAAKgC,WACjBD,MAAO/B,EAAKH,MAAM2B,QAEtBf,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAYpB,MAAO,UAAWD,QAASjB,EAAKyB,gBACxChB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQ3B,MAAO,CAAC4B,OAAQ,OAAQC,MAAO,yBAhD9BrB,IAAMC,+CCiDpBqB,8MA7CX7C,MAAmB,CACf8C,WAAW,KAEfC,iBAAmB,WACf5C,EAAKM,SAAS,CAACqC,WAAW,OAE9BE,mBAAqB,SAAChB,GAElB7B,EAAKC,MAAM6C,YAAY9C,EAAKC,MAAM8C,KAAMlB,EAAEC,cAAcC,OACxD/B,EAAKM,SAAS,CAACqC,WAAW,OAE9BK,gBAAkB,SAACnB,GACf7B,EAAKC,MAAMgD,aAAajD,EAAKC,MAAM8C,KAAMlB,EAAEC,cAAcoB,QAAU,EAAI,MAG3EC,aAAe,WACXnD,EAAKC,MAAMmD,WAAWpD,EAAKC,MAAM8C,KAAKM,OAE1C7C,OAAS,WACL,IAAI8C,EAAoC,IAA3BtD,EAAKC,MAAM8C,KAAKQ,OAE7B,OACI9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAWC,OAAK,GACZhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,UAAW,GAAI/C,MAAO,CAACgD,OAAQ,OAAQC,WAAY,YACtDpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACI5C,MAAM,UACNgC,QAASI,EACTjB,SAAUrC,EAAKgD,kBAClBhD,EAAKH,MAAM8C,UACNlC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACE6B,aAAc/D,EAAKC,MAAM8C,KAAKvB,MAC9BwC,WAAW,EACXC,OAAQjE,EAAK6C,qBACfpC,EAAAC,EAAAC,cAAA,QAAMM,QAASjB,EAAK4C,kBAApB,IAAwC5C,EAAKC,MAAM8C,KAAKvB,OAC9Df,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAYpB,MAAO,YAAaD,QAASjB,EAAKmD,cAC1C1C,EAAAC,EAAAC,cAACuD,EAAA,EAAD,uBAtCD9C,IAAMC,WCiBlB8C,8MAlBX3D,OAAS,WACL,IAAI4D,EAAepE,EAAKC,MAAMoE,MAAMC,IAAI,SAAAvB,GACpC,OAAOtC,EAAAC,EAAAC,cAAC4D,EAAD,CACHtC,IAAKc,EAAKM,GACVD,WAAYpD,EAAKC,MAAMmD,WACvBN,YAAa9C,EAAKC,MAAM6C,YACxBG,aAAcjD,EAAKC,MAAMgD,aACzBF,KAAMA,MAGd,OACItC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kBACViD,gBAdWhD,IAAMC,WC2CnBmD,8MAvCX3E,MAAmB,CACf8C,WAAW,EACXnB,MAAOxB,EAAKC,MAAMuB,SAGtBiD,cAAgB,SAAC5C,GACb7B,EAAKM,SAAS,CAACkB,MAAOK,EAAEC,cAAcC,WAG1Ca,iBAAmB,WACf5C,EAAKM,SAAS,CAACqC,WAAW,OAG9BE,mBAAqB,WACjB7C,EAAKC,MAAMyE,oBAAoB1E,EAAKH,MAAM2B,OAC1CxB,EAAKM,SAAS,CAACqC,WAAW,OAE9BnC,OAAS,WAEL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAC+D,QAAS,OAAQC,eAAgB,kBACzC5E,EAAKH,MAAM8C,UACNlC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEH,MAAO/B,EAAKH,MAAM2B,MAClBqD,KAAK,OACLb,WAAW,EACX3B,SAAUrC,EAAKyE,cACfR,OAAQjE,EAAK6C,qBAEfpC,EAAAC,EAAAC,cAAA,MAAIM,QAASjB,EAAK4C,kBAAmB5C,EAAKH,MAAM2B,OAEtDf,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAYpB,MAAO,YAAaD,QAASjB,EAAKC,MAAM6E,gBAChDrE,EAAAC,EAAAC,cAACuD,EAAA,EAAD,qBAlCQ9C,IAAMC,0CCX5B0D,SAAWC,EAAMC,OAAO,CAC1BC,QAAS,2DACTC,iBAAiB,EACjBC,QAAS,CAACC,UAAW,0CAgDVC,EArCH,CACRC,eADQ,SACO/D,GACX,OAAOuD,EAASS,KAAwC,GAAI,CAAChE,WAEjEiE,YAJQ,WAKJ,OAAOV,EAASW,IAAqB,KAEzCC,WAPQ,SAOGC,GACP,OAAOb,EAASc,OAAT,GAAAC,OAAsCF,KAEjDG,oBAVQ,SAUYH,EAAoBlE,GACpC,OAAOqD,EAASiB,IAAT,GAAAF,OAAmCF,GACtC,CAACpE,MAAOE,KAGhBuE,SAfQ,SAeCC,GACL,OAAOnB,EAASW,IAAT,GAAAI,OAA4CI,EAA5C,YAEXC,WAlBQ,SAkBGP,EAAoBM,GAC3B,OAAOnB,EAASc,OAAT,GAAAC,OAAsCF,EAAtC,WAAAE,OAA0DI,KAErEE,WArBQ,SAqBGF,EAAgBxE,GACvB,OAAOqD,EAASS,KAAT,GAAAM,OAAoDI,EAApD,UACH,CAAC1E,MAAOE,KAGhBuB,aA1BQ,SA0BK2C,EAAoB7C,EAAgBQ,GAC7C,IAAI8C,EAAOC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAOvD,GAAP,IAAaQ,WACxB,OAAOwB,EAASiB,IAAT,GAAAF,OAAmDF,EAAnD,WAAAE,OAAuE/C,EAAKM,IAAMgD,IAE7FvD,YA9BQ,SA8BI8C,EAAoB7C,EAAgBvB,GAC5C,IAAI6E,EAAOC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAOvD,GAAP,IAAavB,UACxB,OAAOuD,EAASiB,IAAT,GAAAF,OAAmDF,EAAnD,WAAAE,OAAuE/C,EAAKM,IAAMgD,KC5CpFG,EAAW,4BAclBC,EAAiC,CACrCC,UAAW,IA2FEC,EAtFS,WAAsF,IACxGC,EADmB/G,EAAqFgH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3DJ,EAAcO,EAA6CH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE5G,OAAQC,EAAOnC,MACb,IAlBwB,gCAmBtB,OAAOyB,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAWM,EAAON,UAAUpC,IAAI,SAAA2C,GAAE,OAAAX,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAASW,GAAT,IAAa5C,MAAO,SAE1D,IA3BqB,6BA4BnB,OAAOiC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAW7G,EAAM6G,UAAUpC,IAAI,SAAA2C,GAC7B,OAAIA,EAAG5D,KAAO2D,EAAOpB,WAAmBqB,EACnCX,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACAW,GADA,IAEH5C,MAAO2C,EAAO3C,YAItB,IAxCwB,gCAyCtB,OAAOiC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAS,CAAAJ,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAOU,EAAOE,aAAd,IAA2B7C,MAAO,MAAlCyB,OAAAQ,OAAAa,EAAA,EAAAb,CAA0CzG,EAAM6G,cAE7D,KAAMF,EACJ,OAAOF,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAW7G,EAAM6G,UAAUpC,IAAI,SAAA2C,GAC7B,OAAIA,EAAG5D,KAAO2D,EAAOpB,WACZU,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAIW,GAAX,IAAe5C,MAAK,GAAAyB,OAAAQ,OAAAa,EAAA,EAAAb,CAAMW,EAAG5C,OAAT,CAAgB2C,EAAOX,YAEpCY,MAIf,IAjDiC,yCAkD/B,OAAOX,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAW7G,EAAM6G,UAAUpC,IAAI,SAAA2C,GAC3B,OAAIA,EAAG5D,KAAO2D,EAAOpB,WACZU,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFW,GADL,IAEEzF,MAAOwF,EAAOtF,SACd2C,MAAO,KAGF4C,MAKjB,IArEuB,+BAqFrB,OAfAL,EAAW/G,EAAM6G,UAAUpC,IAAI,SAAA8C,GAC7B,OAAIA,EAAK/D,KAAO2D,EAAOpB,WACdwB,EAEAd,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFc,GADL,IACW/C,MAAMiC,OAAAa,EAAA,EAAAb,CAAKc,EAAK/C,MAAMC,IAAI,SAAAvB,GACjC,OAAIA,EAAKM,KAAO2D,EAAOd,OACdnD,EAEAuD,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAIvD,GAASiE,EAAOK,YAM9Bf,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAIzG,GAAX,IAAkB6G,UAAWE,IAC/B,IArF2B,mCAsFzB,OAAON,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GAAIzG,GAAX,IAAkB6G,UAAW7G,EAAM6G,UAAUY,OAAO,SAAAC,GAAE,OAAIA,EAAGlE,KAAO2D,EAAOpB,eAC7E,IAtFuB,+BAuFrB,OAAOU,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACFzG,GADL,IAEE6G,UAAW7G,EAAM6G,UAAUpC,IAAI,SAAA2C,GAC7B,OAAIA,EAAG5D,KAAO2D,EAAOpB,WAAmBqB,EACnCX,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAA,GACAW,GADA,IAEH5C,MAAO4C,EAAG5C,MAAMiD,OAAO,SAAAE,GAAC,OAAIA,EAAEnE,KAAO2D,EAAOd,eAMtD,OAAOrG,GAmEI4H,EAAa,SAAC7B,EAAmBM,EAAemB,GAAnC,MAA4E,CAACxC,KAxK5E,+BAwK+Fe,aAAYM,SAAQmB,iBC5IxIK,8MAMF7H,MAAmB,CACfmB,YAAa,SAIjB2G,OAAS,SAACjG,GACN1B,EAAKC,MAAM0H,OAAOjG,EAAU1B,EAAKC,MAAMoD,OAG3CnD,aAAe,SAAC0H,GACZ5H,EAAKM,SAAS,CACVU,YAAa4G,OAIrB3E,aAAe,SAACF,EAAgBQ,GAC5BvD,EAAKC,MAAMgD,aAAajD,EAAKC,MAAMoD,GAAIN,EAAMQ,MAGjDT,YAAc,SAACC,EAAgBrB,GAE3B1B,EAAKC,MAAM6C,YAAY9C,EAAKC,MAAMoD,GAAIN,EAAMrB,MAGhD0B,WAAa,SAAC8C,GACVlG,EAAKC,MAAM4H,WAAW7H,EAAKC,MAAMoD,GAAI6C,MAGzCpB,eAAiB,WACb9E,EAAKC,MAAM0F,WAAW3F,EAAKC,MAAMoD,OAGrCqB,oBAAsB,SAAChD,GACnB1B,EAAKC,MAAM8F,oBAAoB/F,EAAKC,MAAMoD,GAAI3B,MAIlDlB,OAAS,WAAM,IAAAsH,EAEQ9H,EAAKC,MAAnBoE,aAFM,IAAAyD,EAEE,GAFFA,EAIX,OACIrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAMC,MAAI,GACNvH,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,UAAW,GAAI/C,MAAO,CAACqH,QAAS,OAAQpE,WAAY,YACvDpD,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,YACXV,EAAAC,EAAAC,cAACuH,EAAD,CACIxD,oBAAqB1E,EAAK0E,oBAC1BI,eAAgB9E,EAAK8E,eACrBtD,MAAOxB,EAAKC,MAAMuB,QACtBf,EAAAC,EAAAC,cAACwH,EAAD,CAAgBxG,QAAS3B,EAAK2H,SAC9BlH,EAAAC,EAAAC,cAACyH,EAAD,CACIhF,WAAYpD,EAAKoD,WACjBN,YAAa9C,EAAK8C,YAClBG,aAAcjD,EAAKiD,aACnBoB,MAAOA,EAAMiD,OAAO,SAAAE,GAChB,OAAQxH,EAAKH,MAAMmB,aACf,IAAK,MACD,OAAO,EACX,IAAK,YACD,OAAoB,IAAbwG,EAAEjE,OACb,IAAK,SACD,OAAoB,IAAbiE,EAAEjE,YAIzB9C,EAAAC,EAAAC,cAAC0H,EAAD,CAAgBrH,YAAahB,EAAKH,MAAMmB,YACxBd,aAAcF,EAAKE,qFArEnDoI,KAAKrI,MAAMgG,SAASqC,KAAKrI,MAAMoD,WAHhBjC,IAAMC,WA0FdkH,EATWC,YAA6D,KAAM,CACzF7C,WD+EsB,SAACC,GAAD,OAAwB,SAAC6C,GACjDnD,EAAIK,WAAWC,GACZ8C,KAAK,SAAAC,GAC6B,IAA7BA,EAASC,KAAKC,YAChBJ,EA7DsB,SAAC7C,GAAD,MAA4C,CAACf,KAnI5C,mCAmImEe,cA6DjFd,CAAec,QClF5BG,oBDsF+B,SAACG,EAAgBxE,GAAjB,OAAsC,SAAC+G,GACxEnD,EAAIS,oBAAoBG,EAAOxE,GAC5BgH,KAAK,SAAAC,GAC6B,IAA7BA,EAASC,KAAKC,YAChBJ,EA9D2B,SAAC7C,EAAmBlE,GAApB,MAAkE,CAACmD,KAvIjE,yCAuI8FnD,WAAUkE,cA8D5HlB,CAAoBhD,EAAUwE,QCzF3CD,SD8FoB,SAACC,GAAD,OAAoB,SAACuC,GAC3CnD,EAAIW,SAASC,GACVwC,KAAK,SAAAC,GACJF,EA/DgF,CAAC5D,KAnJ9D,6BAmJ+ER,MA+DhFsE,EAASC,KAAKE,MA/DyElD,WA+DlEM,QChGzCyB,ODmGkB,SAACjG,EAAiBwE,GAAlB,OAAqC,SAACuC,GAC1DnD,EAAIc,WAAWF,EAAQxE,GACpBgH,KAAK,SAAAC,GA7Da,IAACtC,EA8De,IAA7BsC,EAASC,KAAKC,YAChBJ,GA/DgBpC,EA+DCsC,EAASC,KAAKA,KAAKZ,KA/DmC,CAACnD,KAAM2B,EAAUH,UAAST,WA+DvDM,SCtG9CjD,aDkHwB,SAAC2C,EAAoB7C,EAAgBQ,GAArC,OAAwD,SAACkF,GACnFnD,EAAIrC,aAAa2C,EAAY7C,EAAMQ,GAChCmF,KAAK,SAAAC,GAC6B,IAA7BA,EAASC,KAAKC,YAChBJ,EAAShB,EAAW7B,EAAY7C,EAAKM,GAAI,CAACE,gBCrH9CT,YDyHuB,SAACoD,EAAgBnD,EAAgBrB,GAAjC,OAAsD,SAAC+G,GAEhFnD,EAAIxC,YAAYoD,EAAQnD,EAAMrB,GAC3BgH,KAAK,SAAAC,GAE6B,IAA7BA,EAASC,KAAKC,YAChBJ,EAAShB,EAAWvB,EAAQnD,EAAKM,GAAI,CAAC7B,MAAOE,SC9HjDmG,WDwGsB,SAACjC,EAAoBM,GAArB,OAAwC,SAACuC,GACjEnD,EAAIa,WAAWP,EAAYM,GACxBwC,KAAK,SAAAC,GAC6B,IAA7BA,EAASC,KAAKC,YAChBJ,EAhEkB,SAACvC,EAAeN,GAAhB,MAAuD,CAACf,KA9JvD,+BA8J0EqB,SAAQN,cAgE5FO,CAAWD,EAAQN,SCnHV4C,CAQvBd,sCCnGGqB,8MAMFC,aAAe,WACXhJ,EAAKC,MAAMwF,iBAGfwD,YAAc,SAACzH,GACXxB,EAAKC,MAAMiJ,YAAY1H,MAG3BhB,OAAS,WACL,IAAI2I,EAAYnJ,EAAKC,MAAMyG,UAAUpC,IAAI,SAAAiD,GACrC,OAAO9G,EAAAC,EAAAC,cAACyI,EAAD,CAAUnH,IAAKsF,EAAGlE,GAAIA,GAAIkE,EAAGlE,GAAI7B,MAAO+F,EAAG/F,MAAO6C,MAAOkD,EAAGlD,UAGvE,OACI5D,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACXV,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAQC,SAAS,UACb7I,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,CAAS3I,MAAO,CAAC+D,QAAS,OAAQC,eAAgB,gBAAiBf,WAAY,YAC3EpD,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAYkH,KAAK,QAAQtI,MAAM,UAAUuI,aAAW,QAChDhJ,EAAAC,EAAAC,cAAC+I,EAAAhJ,EAAD,OAEJD,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQI,MAAM,WAAd,WAGRT,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAWC,OAAK,GACZhD,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAM4B,WAAS,EAAC/I,MAAO,CAACqH,QAAS,WAC7BxH,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,UAAW,EAAG/C,MAAO,CAACqH,QAAS,OAAQpE,WAAY,YACtDpD,EAAAC,EAAAC,cAACwH,EAAD,CAAgBxG,QAAS3B,EAAKiJ,gBAGtCxI,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAM4B,WAAS,EAACC,QAAS,GACpBT,wEAjCjBb,KAAKU,sBAHK5H,IAAMC,WAsDTwI,EAJMrB,YANG,SAAC3I,GACrB,MAAO,CACH6G,UAAW7G,EAAMiK,SAASpD,YAIuE,CACrGwC,YFgHuB,SAAC1H,GAAD,OAAmB,SAACiH,GAC7CnD,EAAIC,eAAe/D,GAChBkH,KAAK,SAAAC,GAC2B,IAA7BA,EAASC,KAAKC,YAChBJ,EAjEkE,CAAC5D,KA3H7C,gCA2HiEqC,YAiElEyB,EAASC,KAAKA,KAAKZ,WEnH1CvC,YFyGuB,kBAAM,SAACgD,GAChCnD,EAAIG,cACDiD,KAAK,SAAAqB,GACJtB,EApDuE,CAAC5D,KA3HlD,gCA2HsE6B,UAoDvEqD,EAAInB,YE9GVJ,CAGlBO,GCnEiBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECdAC,EAAcC,YAAgB,CAClCR,SAASnD,IAOI4D,EADDC,YAAYH,EAAaI,YAAgBC,MCHvDC,IAASnK,OACPC,EAAAC,EAAAC,cAACiK,EAAA,EAAD,CAAUL,MAAOA,GACf9J,EAAAC,EAAAC,cAACkK,EAAD,OAEAC,SAASC,eAAe,SF0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.e4e14c14.chunk.js","sourcesContent":["import React from 'react';\nimport {Button} from \"@material-ui/core\";\n\ntype StateType = {\n    isHidden: boolean\n}\n\ntype OnPropsType = {\n    changeFilter: (filter: string) => void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<OnPropsType, StateType> {\n\n    state: StateType = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter(\"All\")\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter(\"Completed\")\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter(\"Active\")\n    };\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n\n\n    render = () => {\n\n        return (\n            <div style={{paddingTop: \"15px\"}}>\n                {!this.state.isHidden && <div>\n                  <Button variant={this.props.filterValue === \"All\" ? \"contained\" : \"text\"}\n                          onClick={this.onAllFilterClick}>all</Button>\n                  <Button variant={this.props.filterValue === \"Completed\" ? \"contained\" : \"text\"} color={\"primary\"}\n                          onClick={this.onCompletedFilterClick}>Completed</Button>\n                  <Button variant={this.props.filterValue === \"Active\" ? \"contained\" : \"text\"} color={\"secondary\"}\n                          onClick={this.onActiveFilterClick}>Active</Button>\n                </div>\n                }\n                <div style={{paddingTop: \"10px\"}}>\n                    {!this.state.isHidden && <Button className=\"hide\" onClick={this.onHideFiltersClick}>hide</Button >}\n                    {this.state.isHidden && <Button className=\"show\" onClick={this.onShowFiltersClick}>show</Button >}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\"\nimport {AddBox} from \"@material-ui/icons\";\n\ntype StateType = {\n    error: boolean\n    title: string\n}\n\ntype OnPropsType = {\n    addItem: (newText: string) => void\n}\n\n//Если есть локальный стейт и пропсы. То первым передаем пропсы\nclass AddNewItemForm extends React.Component<OnPropsType, StateType> {\n\n\n    state: StateType = {\n        error: false,\n        title: \"\",\n    };\n\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n\n        if (newTitle === \"\") {\n            this.setState({error: true})\n        } else {\n            this.setState({error: false, title: \"\"})\n            this.props.addItem(newTitle)\n        }\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    };\n\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick()\n        }\n    };\n\n\n    render = () => {\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <TextField\n                    error={!!this.state.error}\n                    helperText={this.state.error? \"Title is required\": \"\"}\n                    variant={\"outlined\"}\n                    label=\"Type value\"\n                    onChange={this.onTitleChanged}\n                    onKeyPress={this.onKeyPress}\n                    value={this.state.title}\n                />\n                <IconButton color={\"primary\"} onClick={this.onAddItemClick}>\n                    <AddBox style={{height: \"35px\", width: \"35px\"}} />\n                </IconButton>\n            </div>\n        )\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React, {ChangeEvent} from 'react';\nimport {TaskType} from \"../../../types/entities\";\nimport {Checkbox, Container, Grid, IconButton, Paper, TextField} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype StateType = {\n    editeMode: boolean\n}\n\ntype OnPropsType = {\n    task: TaskType\n    changeTitle: (task: TaskType, newTitle: string) => void\n    changeStatus: (task: TaskType, status: number) => void\n    deliteTask: (id: string) => void\n}\n\nclass TodoListTask extends React.Component<OnPropsType, StateType> {\n\n    state: StateType = {\n        editeMode: false\n    }\n    activateEditMode = () => {\n        this.setState({editeMode: true})\n    }\n    deActivateEditMode = (e: any) => {\n        debugger\n        this.props.changeTitle(this.props.task, e.currentTarget.value)\n        this.setState({editeMode: false})\n    }\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.changeStatus(this.props.task, e.currentTarget.checked ? 2 : 0);\n    };\n\n    onDeliteTask = () => {\n        this.props.deliteTask(this.props.task.id)\n    }\n    render = () => {\n        let isDone = this.props.task.status === 2;\n\n        return (\n            <Container fixed>\n                <Paper elevation={10} style={{margin: \"10px\", background: \"#c1ff7a\"}}>\n                    <div >\n                        <Checkbox\n                            color=\"primary\"\n                            checked={isDone}\n                            onChange={this.onIsDoneChanged}/>\n                        {this.state.editeMode\n                            ? <TextField\n                                defaultValue={this.props.task.title}\n                                autoFocus={true}\n                                onBlur={this.deActivateEditMode}/>\n                            : <span onClick={this.activateEditMode}> {this.props.task.title}</span>}\n                        <IconButton color={\"secondary\"} onClick={this.onDeliteTask}>\n                            <Delete/>\n                        </IconButton>\n                    </div>\n                </Paper>\n            </Container>\n        )\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\nimport { TaskType } from '../../types/entities';\n\n\ntype OnPropsType = {\n    tasks: Array<TaskType>\n    deliteTask: (taskId: string) => void\n    changeTitle: (task: TaskType, newTitle: string) => void\n    changeStatus: (task: TaskType, status: number) => void\n}\n\n\nclass TodoListTasks extends React.Component<OnPropsType> {\n\n    render = () => {\n        let taskElements = this.props.tasks.map(task => {\n            return <TodoListTask\n                key={task.id}\n                deliteTask={this.props.deliteTask}\n                changeTitle={this.props.changeTitle}\n                changeStatus={this.props.changeStatus}\n                task={task}\n            />\n        });\n        return (\n            <div className=\"todoList-tasks\">\n                {taskElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n","import React, {ChangeEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype StateType = {\n    editeMode: boolean\n    title: string\n}\n\ntype OnPropsType = {\n    changeTodolistTitle: (newText: string) => void\n    deleteTodolist: () => void\n    title: string\n}\n\nclass TodoListTitle extends React.Component<OnPropsType, StateType> {\n\n    state: StateType = {\n        editeMode: false,\n        title: this.props.title\n    }\n\n    onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    }\n\n    activateEditMode = () => {\n        this.setState({editeMode: true})\n    }\n\n    deActivateEditMode = () => {\n        this.props.changeTodolistTitle(this.state.title)\n        this.setState({editeMode: false})\n    }\n    render = () => {\n\n        return (\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}} >\n                {this.state.editeMode\n                    ? <TextField\n                        value={this.state.title}\n                        type=\"text\"\n                        autoFocus={true}\n                        onChange={this.onTitleChange}\n                        onBlur={this.deActivateEditMode}\n                    />\n                    : <h3 onClick={this.activateEditMode}>{this.state.title}</h3>\n                }\n                <IconButton color={\"secondary\"} onClick={this.props.deleteTodolist}>\n                    <Delete/>\n                </IconButton>\n            </div>\n        )\n    }\n}\n\nexport default TodoListTitle;\n\n","import axios from \"axios\";\r\nimport {TaskType, TodoType} from \"../types/entities\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists/\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"a4868654-1346-4601-9c9f-2bf29679e35a\"}\r\n});\r\n\r\n\r\ntype CommonApiType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\n\r\nconst api = {\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonApiType<{ item: TodoType }>>(\"\", {title})\r\n    },\r\n    getTodolist() {\r\n        return instance.get<Array<TodoType>>(\"\")\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, newTitle: string) {\r\n        return instance.put<CommonApiType<{}>>(`${todolistId}`,\r\n            {title: newTitle}\r\n        )\r\n    },\r\n    getTasks(taskId: string) {\r\n        return instance.get<{ items: Array<TaskType> }>(`${taskId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(taskId: string, newTitle: string) {\r\n        return instance.post<CommonApiType<{ item: TaskType }>>(`${taskId}/tasks`,\r\n            {title: newTitle}\r\n        )\r\n    },\r\n    changeStatus(todolistId: string, task: TaskType, status: number) {\r\n        let newTask = {...task, status}\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(`${todolistId}/tasks/${task.id}`, newTask)\r\n    },\r\n    changeTitle(todolistId: string, task: TaskType, title: string) {\r\n        let newTask = {...task, title}\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(`${todolistId}/tasks/${task.id}`, newTask)\r\n    }\r\n\r\n\r\n}\r\nexport default api;","import api from \"../api/api\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/entities\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const ADD_TODOLIST = \"todolist/reducer/ADD_TODOLIST\"\r\nexport const ADD_TASK = \"todolist/reducer/ADD_TASK\"\r\nexport const SET_TASKS = \"todolist/reducer/SET_TASKS\"\r\nexport const CHANGE_TASK = \"todolist/reducer/CHANGE_TASK\"\r\nexport const DELETE_TODOLIST = \"todolist/reducer/DELETE_TODOLIST\"\r\nexport const DELETE_TASK = \"todolist/reducer/DELETE_TASK\"\r\nexport const SET_TODOLIST = \"todolist/reducer/SET_TODOLIST\"\r\nexport const CHANGE_TODOLIST_TITLE = \"todolist/reducer/CHANGE_TODOLIST_TITLE\"\r\n\r\n\r\n\r\ntype InitialStateType = {\r\n  todolists: Array<TodoType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n  todolists: []\r\n}\r\n\r\n\r\n\r\nconst todolistReducer = (state: InitialStateType = initialState, action:TodoActionTypes): InitialStateType => {\r\n  let newTasks\r\n  switch (action.type) {\r\n    case SET_TODOLIST:\r\n      return {\r\n        ...state,\r\n        todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n      }\r\n    case SET_TASKS:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id !== action.todolistId) return tl;\r\n          else return {\r\n            ...tl,\r\n            tasks: action.tasks\r\n          }\r\n        })\r\n      }\r\n    case ADD_TODOLIST:\r\n      return {\r\n        ...state,\r\n        todolists: [{...action.newTodolist, tasks: []}, ...state.todolists]\r\n      }\r\n    case  ADD_TASK:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id === action.todolistId) {\r\n            return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n          } else {\r\n            return tl\r\n          }\r\n        })\r\n      }\r\n    case CHANGE_TODOLIST_TITLE:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n            if (tl.id === action.todolistId) {\r\n              return {\r\n                ...tl,\r\n                title: action.newTitle,\r\n                tasks: []\r\n              }\r\n            } else {\r\n              return tl\r\n            }\r\n          }\r\n        )\r\n      }\r\n    case  CHANGE_TASK:\r\n      newTasks = state.todolists.map(todo => {\r\n        if (todo.id !== action.todolistId) {\r\n          return todo\r\n        } else {\r\n          return {\r\n            ...todo, tasks: [...todo.tasks.map(task => {\r\n              if (task.id !== action.taskId) {\r\n                return task\r\n              } else {\r\n                return {...task, ...action.obj}\r\n              }\r\n            })]\r\n          }\r\n        }\r\n      })\r\n      return {...state, todolists: newTasks}\r\n    case DELETE_TODOLIST:\r\n      return {...state, todolists: state.todolists.filter(el => el.id !== action.todolistId)}\r\n    case DELETE_TASK:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id !== action.todolistId) return tl;\r\n          else return {\r\n            ...tl,\r\n            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n          }\r\n\r\n        })\r\n      }\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default todolistReducer;\r\n\r\ntype TodoActionTypes =\r\n    AddTodolistType\r\n    | SetTodolistType\r\n    | DeleteTodolistType\r\n    | ChangeTodolistTitleType\r\n    | SetTasksType\r\n    | AddTaskType\r\n    | DeleteTaskType\r\n    | ChangeTaskType\r\n\r\ntype AddTodolistType = {\r\n  type: typeof ADD_TODOLIST\r\n  newTodolist: TodoType\r\n}\r\nexport const addTodoList = (newTodolist: TodoType): AddTodolistType => ({type: ADD_TODOLIST, newTodolist})\r\n\r\ntype SetTodolistType = {\r\n  type: typeof SET_TODOLIST\r\n  todolists: Array<TodoType>\r\n}\r\nexport const setTodoList = (todolists: Array<TodoType>): SetTodolistType => ({type: SET_TODOLIST, todolists})\r\n\r\ntype DeleteTodolistType = {\r\n  type: typeof DELETE_TODOLIST\r\n  todolistId: string\r\n}\r\nexport const deleteTodolist = (todolistId:string): DeleteTodolistType => ({type: DELETE_TODOLIST, todolistId})\r\n\r\ntype ChangeTodolistTitleType = {\r\n  type: typeof CHANGE_TODOLIST_TITLE\r\n  todolistId: string\r\n  newTitle: string\r\n}\r\nexport const changeTodolistTitle = (todolistId:string, newTitle:string): ChangeTodolistTitleType => ({type: CHANGE_TODOLIST_TITLE, newTitle, todolistId})\r\n\r\ntype SetTasksType = {\r\n  type: typeof SET_TASKS\r\n  tasks: Array<TaskType>\r\n  todolistId: string\r\n}\r\nexport const setTasks = (tasks: Array<TaskType>, todolistId:string): SetTasksType => ({type: SET_TASKS, tasks, todolistId})\r\n\r\ntype AddTaskType = {\r\n  type: typeof ADD_TASK\r\n  newTask: TaskType\r\n  todolistId: string\r\n}\r\nexport const addTask = (newTask: TaskType, todolistId:string): AddTaskType => ({type: ADD_TASK, newTask, todolistId})\r\n\r\ntype DeleteTaskType = {\r\n  type: typeof DELETE_TASK\r\n  taskId: string\r\n  todolistId: string\r\n}\r\nexport const deleteTask = (taskId:string, todolistId:string): DeleteTaskType => ({type: DELETE_TASK, taskId, todolistId})\r\n\r\ntype ChangeTaskType = {\r\n  type: typeof CHANGE_TASK\r\n  todolistId: string\r\n  taskId: string\r\n  obj: UpdateTaskType\r\n}\r\nexport const changeTask = (todolistId:string, taskId:string, obj: UpdateTaskType): ChangeTaskType => ({type: CHANGE_TASK, todolistId, taskId, obj})\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getTodolist = () => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.getTodolist()\r\n    .then(res => {\r\n      dispatch(setTodoList(res.data));\r\n    });\r\n}\r\nexport const addTodolist = (title: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.createTodolist(title)\r\n    .then(response => {\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(addTodoList(response.data.data.item))\r\n    }\r\n  } )\r\n}\r\nexport const deleteTodo = (todolistId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.deleteTodo(todolistId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(deleteTodolist(todolistId))\r\n      }\r\n    })\r\n}\r\nexport const updateTodolistTitle = (taskId: string, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.updateTodolistTitle(taskId,newTitle)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(changeTodolistTitle(newTitle, taskId))\r\n      }\r\n    })\r\n}\r\n\r\nexport const getTasks = (taskId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.getTasks(taskId)\r\n    .then(response => {\r\n      dispatch(setTasks(response.data.items, taskId))\r\n    })\r\n}\r\nexport const addTsk = (newTitle: string,taskId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.createTask(taskId, newTitle)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(addTask(response.data.data.item, taskId))\r\n      }\r\n    })\r\n}\r\nexport const deletaTask = (todolistId: string, taskId: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.deleteTask(todolistId, taskId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(deleteTask(taskId, todolistId))\r\n      }\r\n    })\r\n}\r\nexport const changeStatus = (todolistId: string, task: TaskType, status: number) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  api.changeStatus(todolistId, task, status)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(changeTask(todolistId, task.id, {status}))\r\n      }\r\n    })\r\n}\r\nexport const changeTitle = (taskId: string, task: TaskType, newTitle: string) => (dispatch: Dispatch<TodoActionTypes>) => {\r\n  debugger\r\n  api.changeTitle(taskId, task, newTitle)\r\n    .then(response => {\r\n      debugger\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(changeTask(taskId, task.id, {title: newTitle}))\r\n      }\r\n    })\r\n}\r\n\r\n","import React from 'react';\nimport '../../App.css';\nimport TodoListFooter from \"../TodoListFooter/TodoListFooter\";\nimport AddNewItemForm from \"../AddNewItemForm/AddNewItemForm\";\nimport TodoListTasks from \"../TodoListTasks/TodoListTasks\";\nimport TodoListTitle from \"../TodoListTitle/TodoListTitle\";\nimport {connect} from \"react-redux\";\nimport {\n    addTsk, deleteTodo, updateTodolistTitle, getTasks, changeStatus, changeTitle, deletaTask\n} from \"../../redux/reducer\";\nimport {TaskType} from \"../../types/entities\";\nimport {AppStateType} from \"../../redux/store\";\nimport {Grid, Paper} from \"@material-ui/core\";\n\ntype StateType = {\n    filterValue: string\n}\n\ntype OnPropsType = {\n    tasks: Array<TaskType>\n    id: string\n    title: string\n}\n\ntype MapDispatchPropsType = {\n    getTasks: (id: string) => void\n    addTsk: (newTitle: string, id: string) => void\n    changeStatus: (id: string, task: TaskType, status: number) => void\n    changeTitle: (id: string, task: TaskType, newTitle: string) => void\n    deletaTask: (id: string, taskId: string) => void\n    deleteTodo: (id: string) => void\n    updateTodolistTitle: (id: string, newTitle: string) => void\n}\n\ntype PropsType = MapDispatchPropsType & OnPropsType\n\nclass TodoList extends React.Component<PropsType, StateType> {\n\n    componentDidMount() {\n        this.props.getTasks(this.props.id)\n    }\n\n    state: StateType = {\n        filterValue: \"All\"\n    };\n\n\n    addTsk = (newTitle: string) => {\n        this.props.addTsk(newTitle, this.props.id)\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState({\n            filterValue: newFilterValue\n        })\n    };\n\n    changeStatus = (task: TaskType, status: number) => {\n        this.props.changeStatus(this.props.id, task, status)\n    };\n\n    changeTitle = (task: TaskType, newTitle: string) => {\n        debugger\n        this.props.changeTitle(this.props.id, task, newTitle)\n    };\n\n    deliteTask = (taskId: string) => {\n        this.props.deletaTask(this.props.id, taskId)\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodo(this.props.id)\n    }\n\n    changeTodolistTitle = (newTitle: string) => {\n        this.props.updateTodolistTitle(this.props.id, newTitle)\n\n    }\n\n    render = () => {\n\n        let {tasks = []} = this.props\n\n        return (\n            <Grid item>\n                <Paper elevation={10} style={{padding: \"13px\", background: \"#aeea00\"}}>\n                    <div className=\"todoList\">\n                        <TodoListTitle\n                            changeTodolistTitle={this.changeTodolistTitle}\n                            deleteTodolist={this.deleteTodolist}\n                            title={this.props.title}/>\n                        <AddNewItemForm addItem={this.addTsk}/>\n                        <TodoListTasks\n                            deliteTask={this.deliteTask}\n                            changeTitle={this.changeTitle}\n                            changeStatus={this.changeStatus}\n                            tasks={tasks.filter(t => {\n                                switch (this.state.filterValue) {\n                                    case \"All\":\n                                        return true;\n                                    case \"Completed\":\n                                        return t.status === 2;\n                                    case \"Active\":\n                                        return t.status !== 2;\n                                }\n                            })}\n                        />\n                        <TodoListFooter filterValue={this.state.filterValue}\n                                        changeFilter={this.changeFilter}\n                        />\n                    </div>\n                </Paper>\n            </Grid>\n        )\n    }\n}\n\nconst ConnectedTodolist = connect<{}, MapDispatchPropsType, OnPropsType, AppStateType>(null, {\n    deleteTodo,\n    updateTodolistTitle,\n    getTasks,\n    addTsk,\n    changeStatus,\n    changeTitle,\n    deletaTask\n})(TodoList);\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/Todolist/TodoList\";\nimport AddNewItemForm from \"./components/AddNewItemForm/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolist, getTodolist} from \"./redux/reducer\";\nimport {AppStateType} from './redux/store';\nimport {TodoType} from \"./types/entities\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Container, Grid, Paper} from \"@material-ui/core\";\n\ntype MapDispatchPropsType = {\n    getTodolist: () => void\n    addTodolist: (title: string) => void\n}\n\ntype MapStatePropsType = {\n    todolists: Array<TodoType>\n}\n\ntype PropsType = MapDispatchPropsType & MapStatePropsType\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        this.props.getTodolist()\n    }\n\n    addTodoList = (title: string) => {\n        this.props.addTodolist(title)\n    }\n\n    render = () => {\n        let todoLists = this.props.todolists.map(el => {\n            return <TodoList key={el.id} id={el.id} title={el.title} tasks={el.tasks}/>\n        })\n\n        return (\n            <div className=\"App\">\n                <AppBar position=\"static\">\n                    <Toolbar style={{display: \"flex\", justifyContent: \"space-between\", background: \"#1a746b\"}}>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon/>\n                        </IconButton>\n                        <Button color=\"inherit\">Login</Button>\n                    </Toolbar>\n                </AppBar>\n                <Container fixed>\n                    <Grid container style={{padding: \"20px 0\"}}>\n                        <Paper elevation={5} style={{padding: \"10px\", background: \"#d3ebd3\"}}>\n                            <AddNewItemForm addItem={this.addTodoList}/>\n                        </Paper>\n                    </Grid>\n                    <Grid container spacing={4}>\n                        {todoLists}\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        todolists: state.todolist.todolists\n    }\n}\n\nconst ConnectedApp = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addTodolist,\n    getTodolist\n})(App);\nexport default ConnectedApp;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport todolistReducer from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todolist:todolistReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer //Будет возвращать весь state приложения\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}